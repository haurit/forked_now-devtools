<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.AppSanity</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Performs a number of changes to a scoped app's assets to maintain application sanity. E.g., the function removes the copied_from attribute in atf tests, removes unneccesary field level ACLs and removes the is_private flag from system properties.</description>
        <name>AppSanity</name>
        <script><![CDATA[function AppSanity(strAppSysIdOrScopeName)
{
	function Log(vValue)
	{
		x_snc_devtools.Log('AppSanity: '+RenderValue(vValue));
	}
	
	
	var strAppSysId = '';
	var strAppScope = '';
	var grApp = false;
	
	if (IsValidSysId(strAppSysIdOrScopeName) == false)
	{
		strAppScope = strAppSysIdOrScopeName;
		grApp = new GlideRecord('sys_app');
		grApp.addQuery('scope','=',strAppSysIdOrScopeName);
		grApp.query();
		if (grApp.getRowCount() != 1)
		{
			Log('Error: App not found with scope name: '+strAppScope);
			return false;
		}
		grApp.next();
		strAppSysId = grApp.sys_id; 
	}
	else
	{
		strAppSysId = strAppSysIdOrScopeName;
		grApp = GetRecord('sys_app',strAppSysId);
		if (grApp == false)
		{
			Log('Error: App not found with sys_id: '+strAppSysId);
			return false;
		}
		strAppScope = GetStringValue(grApp.scope);
	}

	Log('Checking ATF tests...');
	var grSAT = new GlideRecord('sys_atf_test');
	grSAT.addQuery('sys_scope','=',strAppSysId);
	grSAT.addQuery('copied_from','!=','');
	grSAT.query();
	while (grSAT.next())
	{
		Log('Updating test "'+GetStringValue(grSAT.name)+'"');
		grSAT.copied_from='';
		GlideRecordUpdate(grSAT);
	}

	Log('Checking ATF test steps...');
	var grSAS = new GlideRecord('sys_atf_step');
	grSAS.addQuery('sys_scope','=',strAppSysId);
	grSAS.addQuery('copied_from','!=','');
	grSAS.query();
	while (grSAS.next())
	{
		Log('Updating test step "'+GetStringValue(grSAS.description)+'" of test "'+GetStringValue(grSAS.test.getDisplayValue())+'"');
		grSAS.copied_from='';
		GlideRecordUpdate(grSAS);
	}
	
	
	Log('Checking test suite tests...');
	var grSysAtfTestSuiteTest = new GlideRecord('sys_atf_test_suite_test');
	grSysAtfTestSuiteTest.addQuery('sys_scope','=',strAppSysId);
	grSysAtfTestSuiteTest.addQuery('test_suite.sys_scope','!=',strAppSysId);
	grSysAtfTestSuiteTest.query();
	while (grSysAtfTestSuiteTest.next())
	{
		Log('Deleting test suite test record "'+grSysAtfTestSuiteTest.sys_id+'" of test suite "'+GetStringValue(grSysAtfTestSuiteTest.test_suite.getDisplayValue())+'" as scopes do not match.');
		GlideRecordDelete(grSysAtfTestSuiteTest);
	}		
	
	
	Log('Checking ACLs for useless field level operations...');
	var grSSA = new GlideRecord('sys_security_acl');
	grSSA.addQuery('sys_scope','=',strAppSysId);
	grSSA.addQuery('name','CONTAINS','.'); // Field level
	var condition = grSSA.addQuery('operation','=','delete');
	condition.addOrCondition('operation','=','create');
	grSSA.query();
	while (grSSA.next())
	{
		Log('Deleting ACL: '+GetStringValue(grSSA.operation)+' / '+GetStringValue(grSSA.name));
		GlideRecordDelete(grSSA);
	}
	
	Log('Checking ACLs for unintended use of the snc_internal role...');
	var grSSA = new GlideRecord('sys_security_acl');
	grSSA.addQuery('sys_scope','=',strAppSysId);
	grSSA.query();
	while (grSSA.next())
	{
		// Get all roles associated to the ACL
		var grSSAR = new GlideRecord('sys_security_acl_role');
		grSSAR.addQuery('sys_security_acl','=',grSSA.sys_id);
		grSSAR.query();
		if (grSSAR.getRowCount() > 1)
		{
			var bContinue = true;
			while(bContinue && grSSAR.next())
			{
				var grRole = GetRecord('sys_user_role',grSSAR.sys_user_role);
				if (grRole != false)
				{
					if (GetStringValue(grRole.name) == 'snc_internal');
					{
						Log('Deleting snc_internal role from ACL: '+GetStringValue(grSSA.operation)+' / '+GetStringValue(grSSA.name));
						GlideRecordDelete(grSSAR);
						bContinue = false;
					}
				}
			}
		}	
		
		
	}
		
	
	
	Log('Checking properties...');
	var grSP = new GlideRecord('sys_properties');
	grSP.addQuery('sys_scope','=',strAppSysId);
	grSP.addQuery('is_private','=','true');
	grSP.query();
	while (grSP.next())
	{
		Log('Updating property: '+GetStringValue(grSP.name));
		grSP.is_private = false;
		GlideRecordUpdate(grSP);
	}
	
	Log('Checking app modules...');
	var grAM = new GlideRecord('sys_app_module');
	grAM.addQuery('sys_scope','=',strAppSysId);
	grAM.query();
	while (grAM.next())
	{
		Log('Updating module: '+GetStringValue(grAM.title));
		grAM.sys_name = grAM.title;
		GlideRecordUpdate(grAM);
	}	
	
	Log('Cleaning sys_index records...');
	var grSI = new GlideRecord('sys_index');
	grSI.addQuery('sys_scope','=',strAppSysId);
	grSI.query();
	GlideRecordDeleteMultiple(grSI);

	
	Log('Completed!');
	
	return true;
	
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-02-23 08:18:05</sys_created_on>
        <sys_id>f5a58b38dbaee010ba15a35305961957</sys_id>
        <sys_mod_count>44</sys_mod_count>
        <sys_name>AppSanity</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_f5a58b38dbaee010ba15a35305961957</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-13 07:58:42</sys_updated_on>
    </sys_script_include>
</record_update>
