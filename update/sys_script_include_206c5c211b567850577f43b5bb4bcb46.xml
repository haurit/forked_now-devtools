<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.TestAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The TestAPI class supports scripted tests. </description>
        <name>TestAPI</name>
        <script><![CDATA[var TestAPI = Class.create();
TestAPI.prototype = {
    initialize: function(outputs, steps, stepResult, assertEqual)
	{
		this.m_strLog = '\n';
		this.m_bResult = true;
		this.m_outputs = outputs;
		this.m_steps = steps;
		this.m_stepResult = stepResult;
		this.m_assertEqual = assertEqual;
    },
	
	Log: function(strText)
	{
		this.m_strLog += strText + '\n';
		this.m_stepResult.setOutputMessage(this.m_strLog);
	},
	
	SetResult: function(bResult)
	{
		this.m_bResult = GetBoolValue(bResult);
	},

	GetResult: function()
	{
		return this.m_bResult;
	},
	
	TestCase_GetRecord: function(strTable, strRecordSysId, bNoCrossScope, bExpected)
	{
		function TestCase_GetRecord_CheckResult(vInput,vExpected,vResult)
		{
			return (IsValidRecord(vResult) == vExpected);
		}	
		
		return this.TestCase(
			'GetRecord',
			GetRecord,
			{
				'Table': strTable,
				'SysId': strRecordSysId,
				'NoCrossScope': bNoCrossScope
			},
			bExpected,
			TestCase_GetRecord_CheckResult);
	},
	
	TestCase_RecordGetValue:function(strTable,strSysId,strColumn,vExpected)
	{
		this.TestCase(
			'RecordGetValue',
			RecordGetValue,
			{
				'Table': strTable,
				'SysId': strSysId,
				'Column': strColumn
			},
			vExpected,
			null);
	},

	
	
	TestCase_IsRecordAccessibleByUser: function(strUserSysId, strTable, strColumnPrefix, strRecordSysId, bExpected)
	{
		this.Log('Test case: IsRecordAccessibleByUser');
		
		var strUserSysId = GetStringValue(strUserSysId);
		var grUser = GetUserRecord(strUserSysId);
		if (grUser == false)
		{
			this.Log('Could not get user record: '+strUserSysId);
			this.SetResult(false);
			return false;
		}
		
		var strUserName = GetStringValue(grUser.name);

		this.Log('User: '+strUserName+' ('+GetStringValue(grUser.sys_id) + ')');
		this.Log('Table: '+RenderValue(strTable));
		this.Log('Field prefix: '+RenderValue(strColumnPrefix));
		this.Log('Record SysID: '+RenderValue(strRecordSysId));
		this.Log('Expected: '+RenderValue(bExpected));
		this.Log('Record: '+RenderRecordSummary(GetRecord(strTable,strRecordSysId)));

		
		var bRecordAccessible = false;
		
		// 1. Impersonate
		this.Log('Impersonate user: '+strUserName);
		var strCurrentUser = UserImpersonate(strUserSysId);
		
		// 2. Query
		this.Log('Query record from table '+strTable+': '+strRecordSysId);
		//var grRecord = new GlideRecordSecure(strTable);
		var grRecord = new GlideRecord(strTable);
		grRecord.addQuery(strColumnPrefix+'sys_id','=',strRecordSysId);
		grRecord.query();
		if (grRecord.next())
		{
			//this.Log('Record: '+RenderRecordSummary(GetRecord(strTable,strRecordSysId)));
			if (grRecord.canRead() == true)
			{
				this.Log('canRead() returned true.');
				bRecordAccessible = true;
			}
			else
			{
				this.Log('canRead() returned false.');
			}
		}
		else
		{
			this.Log('Record not found.');
		}
		
		// 3. Unimpersonate
		UserImpersonate(strCurrentUser);
						
		this.Log('Result: '+RenderValue(bRecordAccessible));
		
		if (bRecordAccessible != bExpected)
		{
			this.SetResult(false);
			this.Log('TEST CASE: FAILED\n');
			return false;
		}
		else
		{
			this.Log('TEST CASE: PASSED\n');
			return true;
		}
	},
	
	
	TestCase_InstanceScanCheck: function(strCheckSysId, strTable, strRecordSysId, vExpected)
	{
		function TestCase_InstanceScanCheck_CheckResult(vInput,vExpected,vResult)
		{
			var bFinding = false;
			var aFindings = GetKeys(GetValue(vResult,'findings'));
			for (var nFinding = 0; nFinding < aFindings.length; nFinding++)
			{
				var strFinding = aFindings[nFinding];
				var finding = GetValue(vResult,'findings',strFinding);
				if (finding.check == strCheckSysId)
				{
					bFinding = true;
				}
			}
			return (vExpected == bFinding);
		}

		var strCheckName = 'NOT FOUND!';
		var grCheck = GetRecord('scan_check',strCheckSysId);
		if (IsValidRecord(grCheck) == true)
		{
			strCheckName = '"'+GetStringValue(grCheck.name)+'"';
		}
		
		this.TestCase(
			'Check: ' + strCheckName + '\non Record: ' + RenderRecordSummary(GetRecord(strTable,strRecordSysId)),
			//InstanceScanSuiteToRecord,
			InstanceScanPointScan,
			{
				//'Suite SysId': '',
				'Table': strTable,
				'Record SysId': strRecordSysId,
				'Detailed': false
			},
			vExpected,
			TestCase_InstanceScanCheck_CheckResult,
			true);
	},
	
	TestCase: function(
		strTitle,
		callbackFunction,
		vInput,
		vExpected,
		callbackCheckResult,
		bCompactOutput)
	{
		this.Log('TEST CASE: '+strTitle);
		var strTypeFunction = GetType(callbackFunction);
	
		if (GetType(callbackFunction) != 'function')
		{
			this.SetResult(false);
			this.Log('ERROR: Invalid function provided.\n');
			return;
		}
		if (GetType(vInput) != 'Object')
		{
			this.SetResult(false);
			this.Log('ERROR: Invalid input object provided.\n');
			return;
		}
		bCompactOutput = GetBoolValue(bCompactOutput);
		
		this.Log('Input: '+RenderValue(vInput,bCompactOutput,false,bCompactOutput));
		this.Log('Expected: '+RenderValue(vExpected));

		var aInputKeys = GetKeys(vInput);
		
		var vResult = undefined;
		
		var stopwatch = new StopWatch();
		stopwatch.Start();
		
		if (aInputKeys.length == 0)
		{
			vResult = callbackFunction();
		}
		else if (aInputKeys.length == 1)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)));
		}
		else if (aInputKeys.length == 2)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)));
		}
		else if (aInputKeys.length == 3)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)));
		}
		else if (aInputKeys.length == 4)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)),
				GetValue(vInput,GetValue(aInputKeys,3)));
		}
		else if (aInputKeys.length == 5)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)),
				GetValue(vInput,GetValue(aInputKeys,3)),
				GetValue(vInput,GetValue(aInputKeys,4)));
		}
		else if (aInputKeys.length == 6)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)),
				GetValue(vInput,GetValue(aInputKeys,3)),
				GetValue(vInput,GetValue(aInputKeys,4)),
				GetValue(vInput,GetValue(aInputKeys,5))
			);
		}
		else if (aInputKeys.length == 7)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)),
				GetValue(vInput,GetValue(aInputKeys,3)),
				GetValue(vInput,GetValue(aInputKeys,4)),
				GetValue(vInput,GetValue(aInputKeys,5)),
				GetValue(vInput,GetValue(aInputKeys,6))
			);
		}
		else if (aInputKeys.length == 8)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)),
				GetValue(vInput,GetValue(aInputKeys,3)),
				GetValue(vInput,GetValue(aInputKeys,4)),
				GetValue(vInput,GetValue(aInputKeys,5)),
				GetValue(vInput,GetValue(aInputKeys,6)),
				GetValue(vInput,GetValue(aInputKeys,7))
			);
		}
		else if (aInputKeys.length == 9)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)),
				GetValue(vInput,GetValue(aInputKeys,3)),
				GetValue(vInput,GetValue(aInputKeys,4)),
				GetValue(vInput,GetValue(aInputKeys,5)),
				GetValue(vInput,GetValue(aInputKeys,6)),
				GetValue(vInput,GetValue(aInputKeys,7)),
				GetValue(vInput,GetValue(aInputKeys,8))
			);
		}
		else if (aInputKeys.length == 10)
		{
			vResult = callbackFunction(
				GetValue(vInput,GetValue(aInputKeys,0)),
				GetValue(vInput,GetValue(aInputKeys,1)),
				GetValue(vInput,GetValue(aInputKeys,2)),
				GetValue(vInput,GetValue(aInputKeys,3)),
				GetValue(vInput,GetValue(aInputKeys,4)),
				GetValue(vInput,GetValue(aInputKeys,5)),
				GetValue(vInput,GetValue(aInputKeys,6)),
				GetValue(vInput,GetValue(aInputKeys,7)),
				GetValue(vInput,GetValue(aInputKeys,8)),
				GetValue(vInput,GetValue(aInputKeys,9))
			);
		}
		else
		{
			this.SetResult(false);
			this.Log('ERROR: No support for that amount of parameters!');
		}
		stopwatch.Stop();
		
		this.Log('Runtime: '+stopwatch.GetMilliSeconds()+' ms');
		this.Log('Result: '+RenderValue(vResult,bCompactOutput,false,bCompactOutput));
		
		var bResult = false;
		if (GetType(callbackCheckResult) == 'function')
		{
			bResult = callbackCheckResult(vInput,vExpected,vResult); 
		}
		else
		{
			bResult = (vResult === vExpected);
		}
		
		if (bResult == false)
		{
			this.SetResult(false);
			this.Log('Test case FAILED');
		}
		else
		{
			this.Log('Test case PASSED');
			
		}
		this.Log('');
	},
	
    type: 'TestAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-30 13:48:05</sys_created_on>
        <sys_id>206c5c211b567850577f43b5bb4bcb46</sys_id>
        <sys_mod_count>59</sys_mod_count>
        <sys_name>TestAPI</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_206c5c211b567850577f43b5bb4bcb46</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-14 12:49:51</sys_updated_on>
    </sys_script_include>
</record_update>
