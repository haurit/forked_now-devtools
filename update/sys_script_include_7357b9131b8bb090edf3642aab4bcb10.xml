<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.DevToolsClientAPI</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>The DevToolsClientAPI is a client callable proxy for ajax calls to some of the functions provided by DevTools.</description>
        <name>DevToolsClientAPI</name>
        <script><![CDATA[var DevToolsClientAPI = Class.create();
DevToolsClientAPI.prototype = Object.extendsObject(global.AbstractAjaxProcessor,
{
	GetParentTable: function()
	{
		var strTable = GetStringValue(this.getParameter('sysparm_table'));
		return GetParentTable(strTable);
	},
	
	GetTableFromSysId: function()
	{
		var strSysId = GetStringValue(this.getParameter('sysparm_sys_id'));
		return GetTableFromSysId(strSysId);
	},

	GetFormatConfig: function()
	{
		if (AppGetProperty('ui.formatting') == false)
		{
			return false;
		}
		var strTable = GetStringValue(this.getParameter('sysparm_table'));
		var strSysId = GetStringValue(this.getParameter('sysparm_sys_id'));
		var strRecords = GetStringValue(this.getParameter('sysparm_records'));
		if (strTable == 'syslog_app_scope')
		{
			return false;
		}
		records = ParseJson(strRecords);
		if (IsObject(records))
		{
			var formatconfig = GetFormatConfigMultiple(records);
		}
		else
		{
			var formatconfig = GetFormatConfig(strTable,strSysId);
		}
		return JSON.stringify(formatconfig);
	},

	GetAllTables: function()
	{
		var bExtendingTables = GetBoolValue(this.getParameter('sysparm_extending_tables'));
		var tables = GetAllTables(bExtendingTables);
		return JSON.stringify(tables);
	},
	
	SetScopeForSystemPropertiesUI: function()
	{
		var strCategory = GetStringValue(this.getParameter('sysparm_category'));
		if (strCategory != '')
		{
			var grSPC = new GlideRecord('sys_properties_category');
			grSPC.addQuery('name','=',strCategory);
			grSPC.query();
			if (grSPC.next() == true)
			{
				var strCategoryScope = GetStringValue(grSPC.sys_scope); 
				var strCurrentScope = GetCurrentScope();
				if (strCategoryScope != strCurrentScope)
				{
					SetCurrentScope(strCategoryScope);
					return true;
				}
			}
		}
		return false;	
	},
	
	InstanceScanSuiteOnApp: function()
	{
		var strSuiteSysId = GetStringValue(this.getParameter('sysparm_suite'));
		var strAppSysId = GetStringValue(this.getParameter('sysparm_app'));
		var bDetailed = GetBoolValue(this.getParameter('sysparm_detailed'));
		
		var result = InstanceScanSuiteOnApp(strSuiteSysId, strAppSysId, bDetailed);
		
		return JSON.stringify(result);
	},
	
	InstanceScanIsRunning: function()
	{
		var bIsRunning = InstanceScanIsRunning();
		return bIsRunning;
	},
	
	GetTestRecord: function()
	{
		var strTable = GetStringValue(this.getParameter('sysparm_table'));
		var strSysId = GetStringValue(this.getParameter('sysparm_sys_id'));
		var grRecord = GetRecord(strTable,strSysId);
		if (IsValidRecord(grRecord) == false)
		{
			return false;
		}
		var grTest = GetTestRecord(grRecord);
		return JSON.stringify(Clone(grTest));
	},
	
	CreateUserByEmail: function()
	{
		var strEmail = GetStringValue(this.getParameter('sysparm_email'));
		var strGroups = GetProperty('devtools.createuserbyemail.groups');
		var aGroups = GetArrayValue(strGroups);
		var strUserSysId = CreateUserByEmail(strEmail,aGroups);
		return JSON.stringify(strUserSysId);		
	},
	
	CreateTechnicalUser: function()
	{
		var strName = GetStringValue(this.getParameter('sysparm_user_name'));
		var strUserSysId = CreateTechnicalUser(strName);
		return JSON.stringify(strUserSysId);		
	},	

	CreateTestUser: function()
	{
		var strName = GetStringValue(this.getParameter('sysparm_user_name'));
		var strUserSysId = CreateTestUser(strName);
		return JSON.stringify(strUserSysId);		
	},		

	AppVersionBaselineIsRunning: function()
	{
		return AppVersionBaselineIsRunning();
	},

	AppVersionBaselineCheckReleaseNotes: function()
	{
		var strAppSysId = GetStringValue(this.getParameter('sysparm_app_sys_id'));
		var bResult = AppVersionBaselineCheckReleaseNotes(strAppSysId);
		return JSON.stringify(bResult);		
	},	

	GetAppUncommittedFiles: function()
	{
		var strAppSysId = GetStringValue(this.getParameter('sysparm_app_sys_id'));
		var aUncommittedFiles = GetAppUncommittedFiles(strAppSysId);
		return JSON.stringify(aUncommittedFiles);		
	},	

	GetAppBranches: function()
	{
		var strAppSysId = GetStringValue(this.getParameter('sysparm_app_sys_id'));
		var aBranches = GetAppBranches(strAppSysId);
		return JSON.stringify(aBranches);		
	},	

	start: function()
	{
		var strWorkerId = '';
		var strTrackerSourceTable = '';
		var strTrackerType = '';

		var strCommand = GetStringValue(this.getParameter("sysparm_ajax_processor_command"));
		if (strCommand == 'app_version_baseline')
		{
			var strAppSysId = GetStringValue(this.getParameter("sysparm_ajax_processor_app_sys_id"));
			if (strAppSysId == '')
			{
				LogError('DevToolsClientAPI.start(): AppVersionBaseline: no app_sys_id specified.');
				return '';
			}
			var grApp = GetAppRecord(strAppSysId);
			if (IsValidRecord(grApp) == false)
			{
				LogError('DevToolsClientAPI.start(): AppVersionBaseline: App not found.');
				return '';
			}

			strTrackerSourceTable = 'sys_app';
			strTrackerType = 'app_version_baseline';
	
			if (AppVersionBaselineIsRunning() == true)
			{
				LogError('DevToolsClientAPI.start(): AppVersionBaseline: Already running.');
				return '';
			}

			var strProgressName = "Creating a new version baseline for application "+GetCleanAppName(grApp.name)+' '+grApp.version;

			var params = {};
			params['strAppSysId'] = strAppSysId;

			strWorkerId = StartWorker(
				strProgressName,
				'x_snc_devtools.DevToolsWorkerAPI',
				'AppVersionBaseline',
				params);
		}
		else
		{
			LogError('DevToolsClientAPI.start(): Unknown command!');
		}

		
		if (strWorkerId == '')
		{
			return '';
		}

		var nCountDown = 1000;
		while (nCountDown > 0)
		{
			var grTracker = new GlideRecord('sys_execution_tracker');
			grTracker.orderByDesc('sys_created_on');
			grTracker.addQuery('source_table','=',strTrackerSourceTable);
			grTracker.addQuery('type','=',strTrackerType);
			grTracker.addQuery('state', 'IN', '0,1');
			grTracker.query();
			if (grTracker.next())
			{
				return GetStringValue(grTracker.sys_id);
			}
			nCountDown--;
		}
		
		return strWorkerId;
	},
			

    type: 'DevToolsClientAPI'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-10-12 13:47:51</sys_created_on>
        <sys_id>7357b9131b8bb090edf3642aab4bcb10</sys_id>
        <sys_mod_count>94</sys_mod_count>
        <sys_name>DevToolsClientAPI</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_7357b9131b8bb090edf3642aab4bcb10</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-19 17:36:57</sys_updated_on>
    </sys_script_include>
</record_update>
