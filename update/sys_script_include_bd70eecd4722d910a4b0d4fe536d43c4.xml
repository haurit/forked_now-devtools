<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.ScriptGetFunctionNames</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Retrieves the names of all functions from the given script (or engine object). As the sn_parser object is only available within a script in a linter scan check, this function can only be used within such a check script for the time being.&#13;
A known deficiency is that anonymous functions erroneously return with the function name of the function that receives the function as a parameter.</description>
        <name>ScriptGetFunctionNames</name>
        <script><![CDATA[function ScriptGetFunctionNames(vScriptOrEngine)
{
	var parser = null;
	var engine = null;
	if (IsObject(vScriptOrEngine) == false)
	{
		parser = RunScriptInGlobalScope(
			 'result = false;\n'
			+'if (!typeof sn_parser === undefined )\n'
			+'{\n'
			+'   result = new sn_parser.RhinoParser();\n'
			+'}');
		if (IsObject(parser) == false)
		{
			return false;
		}
	}
	else
	{
		engine = vScriptOrEngine;
	}
	
	if (IsObject(parser) == false && IsObject(engine) == false)
	{
		return false;
	}
	
	var rootNode = null;
	if (IsObject(parser) == true)
	{
		var strScript = GetStringValue(vScriptOrEngine);
		rootNode = parser.parse(strScript);
	}
	else if (IsObject(engine) == true)
	{
		rootNode = engine.rootNode;
	}
	
	if (IsObject(rootNode) == false)
	{
		//Debug('rootNode is not an object');
		return false;
	}

	var aNames = [];
	var nodes = {};
	var parentNodes = [];
	
	
	// Pass 1: Use visitor to build up the basic structure	
	rootNode.visit(function(node)
	{
		var key = node.getAbsolutePosition();
		if (nodes.hasOwnProperty / (key))
		{
			gs.error("LINT: duplicate position " + key);
		}
		nodes[key] = {
			lineNo: node.getLineNo(),
			position: node.getAbsolutePosition(),
			type: node.getTypeName(),
			nodeOrig: node
		};
		var parent = node.getParent(); 
		if (!gs.nil(parent))
		{
			nodes[key].parentPosition = parent.getAbsolutePosition();
		}
		if (node.getTypeName() == "NAME")
		{
			nodes[key].name = node.getNameIdentifier();
		}
	});

	// Pass 2: Child nodes to their parent nodes
	for (key in nodes)
	{
		var node = nodes[key];
		if (!gs.nil(node.parentPosition) && node.parentPosition != node.position)
		{
			var parentNode = nodes[node.parentPosition];
			if (!parentNode.hasOwnProperty("children"))
			{
				SetValue([],nodes,node.parentPosition,'children');
			}
			var children = GetValue(nodes,node.parentPosition,'children');
			children.push(node);
			SetValue(children,nodes,node.parentPosition,'children');
		}
		else
		{
			parentNodes.push(nodes[key]);
		}
	}

		
	var node;

	for (key in nodes)
	{
		var currentNode = nodes[key];
		if (currentNode.type == "FUNCTION")
		{
			var parentNode = nodes[currentNode.parentPosition];
			if (parentNode.type == "NAME")
			{
				node = null;

				// Assignment of an anonymous function to a static method name, 
				// e.g. Class.static = function(arg1, ...) ...
				if (GetValue(parentNode,'children',0) != currentNode && GetValue(parentNode,'children',0,'type') == "NAME")
				{
					node = GetValue(parentNode,'children',0);
				}

				// Assignment of an anonymous function to a dynamic method name
				// e.g. Class.prototype = { dynamic: function(arg1, ...) }
				else
				{
					node = nodes[currentNode.parentPosition];
				}

			}
			else if (GetValue(currentNode,'children',0,'type') == "NAME")
			{

				// Non-anonymous function
				// e.g. function notAnonymous(arg1, ...)
				node = GetValue(currentNode,'children',0);
			}
			if( ! gs.nil(node) )
			{
				aNames.push(node.name);
			}
		}
	}
	

	/*
	toString: function() {
		return JSON.stringify(this.parentNodes);
	},
	*/

	
	
	
	return aNames;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-13 12:47:11</sys_created_on>
        <sys_id>bd70eecd4722d910a4b0d4fe536d43c4</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>ScriptGetFunctionNames</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_bd70eecd4722d910a4b0d4fe536d43c4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-01 11:53:39</sys_updated_on>
    </sys_script_include>
</record_update>
